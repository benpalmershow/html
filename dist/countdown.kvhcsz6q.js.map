{
  "version": 3,
  "sources": ["../js/countdown.js"],
  "sourcesContent": [
    "// Countdown functionality for game elements. Supports multiple .game-countdown elements each with a data-game-time attribute (ISO 8601 preferred).\nfunction parseGameTime(value) {\n    if (!value) return null;\n    // If it looks like ISO or contains 'T', try Date parsing directly\n    if (value.includes('T') || value.match(/\\d{4}-\\d{2}-\\d{2}/)) {\n        const t = Date.parse(value);\n        return isNaN(t) ? null : t;\n    }\n\n    // Try to parse common human-readable formats (e.g., 'October 2, 2025 17:15:00 -0700')\n    const t = Date.parse(value);\n    return isNaN(t) ? null : t;\n}\n\nfunction updateAllCountdowns() {\n    const elements = document.querySelectorAll('.game-countdown');\n    if (!elements || elements.length === 0) return;\n\n    const now = Date.now();\n    elements.forEach(el => {\n        const attr = el.getAttribute('data-game-time') || el.textContent || '';\n        const gameTimeMs = parseGameTime(attr.trim());\n\n        if (!gameTimeMs) {\n            // If no valid time available, leave as-is or clear\n            if (!el.dataset.placeholderSet) {\n                el.textContent = 'TBD';\n                el.dataset.placeholderSet = 'true';\n            }\n            return;\n        }\n\n        const distance = gameTimeMs - now;\n\n        if (distance <= 0) {\n            // Calculate hours since game started\n            const hoursSinceStart = Math.abs(Math.floor(distance / (1000 * 60 * 60)));\n\n            // If more than 4 hours have passed since the scheduled start time, the game is likely over\n            if (hoursSinceStart >= 4) {\n                el.textContent = 'Game completed';\n            } else {\n                el.textContent = 'Game in progress';\n            }\n            return;\n        }\n\n        const days = Math.floor(distance / (1000 * 60 * 60 * 24));\n        const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n        const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n        const seconds = Math.floor((distance % (1000 * 60)) / 1000);\n\n        el.textContent = ` (${days}d ${hours}h ${minutes}m ${seconds}s)`;\n    });\n}\n\ndocument.addEventListener('DOMContentLoaded', function () {\n    // Run immediately and then every second\n    updateAllCountdowns();\n    setInterval(updateAllCountdowns, 1000);\n});\n"
  ],
  "mappings": "AACA,SAAS,CAAa,CAAC,EAAO,CAC1B,GAAI,CAAC,EAAO,OAAO,KAEnB,GAAI,EAAM,SAAS,GAAG,GAAK,EAAM,MAAM,mBAAmB,EAAG,CACzD,IAAM,EAAI,KAAK,MAAM,CAAK,EAC1B,OAAO,MAAM,CAAC,EAAI,KAAO,EAI7B,IAAM,EAAI,KAAK,MAAM,CAAK,EAC1B,OAAO,MAAM,CAAC,EAAI,KAAO,EAG7B,SAAS,CAAmB,EAAG,CAC3B,IAAM,EAAW,SAAS,iBAAiB,iBAAiB,EAC5D,GAAI,CAAC,GAAY,EAAS,SAAW,EAAG,OAExC,IAAM,EAAM,KAAK,IAAI,EACrB,EAAS,QAAQ,KAAM,CACnB,IAAM,EAAO,EAAG,aAAa,gBAAgB,GAAK,EAAG,aAAe,GAC9D,EAAa,EAAc,EAAK,KAAK,CAAC,EAE5C,GAAI,CAAC,EAAY,CAEb,GAAI,CAAC,EAAG,QAAQ,eACZ,EAAG,YAAc,MACjB,EAAG,QAAQ,eAAiB,OAEhC,OAGJ,IAAM,EAAW,EAAa,EAE9B,GAAI,GAAY,EAAG,CAKf,GAHwB,KAAK,IAAI,KAAK,MAAM,EAAY,OAAe,CAAC,GAGjD,EACnB,EAAG,YAAc,iBAEjB,OAAG,YAAc,mBAErB,OAGJ,IAAM,EAAO,KAAK,MAAM,EAAY,QAAoB,EAClD,EAAQ,KAAK,MAAO,EAAY,SAAyB,OAAe,EACxE,EAAU,KAAK,MAAO,EAAY,QAAoB,KAAU,EAChE,EAAU,KAAK,MAAO,EAAY,MAAc,IAAI,EAE1D,EAAG,YAAc,KAAK,MAAS,MAAU,MAAY,MACxD,EAGL,SAAS,iBAAiB,mBAAoB,QAAS,EAAG,CAEtD,EAAoB,EACpB,YAAY,EAAqB,IAAI,EACxC",
  "debugId": "898BFB078081529564756E2164756E21",
  "names": []
}