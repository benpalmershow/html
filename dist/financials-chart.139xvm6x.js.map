{
  "version": 3,
  "sources": ["../js/financials-chart.js"],
  "sourcesContent": [
    "// Financials Chart Overlay Functionality\nfunction setupChartIconHandlers() {\n    document.querySelectorAll('.chart-icon').forEach(icon => {\n        icon.addEventListener('click', function (e) {\n            e.preventDefault();\n            e.stopPropagation();\n\n            const indicator = this.closest('.indicator');\n            const indicatorName = indicator.querySelector('.indicator-name').textContent.trim();\n\n            // Toggle the chart overlay on the card\n            toggleChartOverlay(indicator, indicatorName);\n        });\n    });\n}\n\n// Toggle chart overlay on card\nfunction toggleChartOverlay(indicator, indicatorName) {\n    // Check if overlay already exists\n    let overlay = indicator.querySelector('.chart-overlay');\n\n    if (overlay) {\n        // If overlay is visible, hide it\n        if (overlay.classList.contains('show')) {\n            hideChartOverlay(overlay);\n        } else {\n            // If overlay exists but hidden, show it\n            showChartOverlay(indicator, indicatorName, overlay);\n        }\n    } else {\n        // Create new overlay\n        createChartOverlay(indicator, indicatorName);\n    }\n}\n\n// Create new chart overlay\nfunction createChartOverlay(indicator, indicatorName) {\n    const overlay = document.createElement('div');\n    overlay.className = 'chart-overlay';\n    overlay.innerHTML = `\n        <div class=\"chart-overlay-header\">\n            <h4 class=\"chart-overlay-title\">\n                <i data-lucide=\"bar-chart-3\"></i>\n                ${indicatorName}\n            </h4>\n            <button class=\"chart-overlay-close\">&times;</button>\n        </div>\n        <div class=\"chart-overlay-body\">\n            <div class=\"chart-overlay-loading\">\n                <div class=\"chart-overlay-loading-spinner\"></div>\n                <span>Loading chart...</span>\n            </div>\n        </div>\n    `;\n\n    // Add to indicator\n    indicator.appendChild(overlay);\n\n    // Setup close handler\n    const closeBtn = overlay.querySelector('.chart-overlay-close');\n    closeBtn.addEventListener('click', (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        hideChartOverlay(overlay);\n    });\n\n    // Click outside overlay to close\n    overlay.addEventListener('click', (e) => {\n        if (e.target === overlay) {\n            hideChartOverlay(overlay);\n        }\n    });\n\n    // Show overlay and load chart\n    showChartOverlay(indicator, indicatorName, overlay);\n}\n\n// Show chart overlay with animation\nfunction showChartOverlay(indicator, indicatorName, overlay) {\n    // Hide any other open overlays first\n    document.querySelectorAll('.chart-overlay.show').forEach(otherOverlay => {\n        if (otherOverlay !== overlay) {\n            hideChartOverlay(otherOverlay);\n        }\n    });\n\n    // Show current overlay\n    overlay.classList.add('show');\n\n    // Load chart data\n    loadChartInOverlay(indicator, indicatorName, overlay);\n\n    // Update chart icon state\n    const chartIcon = indicator.querySelector('.chart-icon');\n    if (chartIcon) {\n        chartIcon.classList.add('active');\n    }\n}\n\n// Hide chart overlay with animation\nfunction hideChartOverlay(overlay) {\n    overlay.classList.remove('show');\n\n    // Remove active state from chart icon\n    const indicator = overlay.closest('.indicator');\n    const chartIcon = indicator.querySelector('.chart-icon');\n    if (chartIcon) {\n        chartIcon.classList.remove('active');\n    }\n\n    // Remove overlay from DOM after animation\n    setTimeout(() => {\n        if (overlay.parentNode && !overlay.classList.contains('show')) {\n            overlay.parentNode.removeChild(overlay);\n        }\n    }, 300);\n}\n\n// Load chart data into overlay\nasync function loadChartInOverlay(indicator, indicatorName, overlay) {\n    const body = overlay.querySelector('.chart-overlay-body');\n\n    try {\n        // Get chart configuration\n        const chartConfig = await getChartConfig(indicatorName);\n\n        if (chartConfig && chartConfig.data) {\n            // Remove loading indicator\n            const loading = body.querySelector('.chart-overlay-loading');\n            if (loading) loading.remove();\n\n            // Create canvas for chart\n            const canvas = document.createElement('canvas');\n            canvas.className = 'chart-overlay-canvas';\n            canvas.id = `overlay-${indicatorName.replace(/\\s+/g, '-').toLowerCase()}-chart`;\n            body.appendChild(canvas);\n\n            // Initialize chart\n            const chartInstance = initializeChartInOverlay(chartConfig, canvas);\n\n            if (chartInstance) {\n                // Store chart instance for cleanup\n                overlay._chartInstance = chartInstance;\n            }\n        } else {\n            // Show error state\n            showOverlayError(body, 'Chart data not available');\n        }\n    } catch (error) {\n        console.error('Error loading chart in overlay:', error);\n        showOverlayError(body, 'Error loading chart');\n    }\n}\n\n// Show error in overlay\nfunction showOverlayError(body, message) {\n    const loading = body.querySelector('.chart-overlay-loading');\n    if (loading) loading.remove();\n\n    body.innerHTML = `\n        <div class=\"chart-overlay-error\">\n            <div class=\"chart-overlay-error-icon\">📊</div>\n            <p>${message}</p>\n        </div>\n    `;\n}\n\n// Initialize chart within overlay container\nfunction initializeChartInOverlay(chartConfig, canvas) {\n    if (!chartConfig.data) return null;\n\n    const ctx = canvas.getContext('2d');\n\n    // Destroy existing chart if it exists\n    if (window[canvas.id + 'Chart']) {\n        window[canvas.id + 'Chart'].destroy();\n    }\n\n    // Create new chart with overlay-optimized options\n    const chartInstance = new Chart(ctx, {\n        type: 'line',\n        data: chartConfig.data,\n        options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            layout: {\n                padding: { top: 5, right: 5, bottom: 5, left: 5 }\n            },\n            animation: {\n                duration: 600,\n                easing: 'easeInOutQuart'\n            },\n            plugins: {\n                legend: {\n                    display: false // Hide legend in overlay for space\n                },\n                title: {\n                    display: false // Hide title in overlay\n                },\n                tooltip: {\n                    mode: 'index',\n                    intersect: false,\n                    backgroundColor: 'rgba(0, 0, 0, 0.8)',\n                    titleColor: '#fff',\n                    bodyColor: '#fff',\n                    borderColor: '#2C5F5A',\n                    borderWidth: 1,\n                    padding: 8,\n                    titleFont: { size: 11 },\n                    bodyFont: { size: 11 },\n                    boxPadding: 4,\n                    callbacks: {\n                        label: function(context) {\n                            let label = context.dataset.label || '';\n                            if (label) label += ': ';\n                            if (context.parsed.y !== null) {\n                                label += new Intl.NumberFormat('en-US', {\n                                    minimumFractionDigits: 1,\n                                    maximumFractionDigits: 1\n                                }).format(context.parsed.y);\n                            }\n                            return label;\n                        }\n                    }\n                }\n            },\n            scales: {\n                x: {\n                    display: true,\n                    grid: {\n                        display: false,\n                        drawBorder: false\n                    },\n                    ticks: {\n                        maxRotation: 0,\n                        autoSkip: true,\n                        maxTicksLimit: 4,\n                        padding: 2,\n                        font: { size: 9 }\n                    }\n                },\n                y: {\n                    display: true,\n                    beginAtZero: false,\n                    grid: {\n                        color: 'rgba(0, 0, 0, 0.03)',\n                        drawBorder: false\n                    },\n                    ticks: {\n                        padding: 2,\n                        font: { size: 9 },\n                        callback: function(value) {\n                            if (value >= 1000) {\n                                return (value / 1000).toFixed(1) + 'K';\n                            }\n                            return value.toLocaleString();\n                        }\n                    },\n                    position: 'right'\n                }\n            },\n            interaction: {\n                mode: 'nearest',\n                axis: 'x',\n                intersect: false\n            }\n        }\n    });\n\n    window[canvas.id + 'Chart'] = chartInstance;\n    return chartInstance;\n}\n\n// Real-time data update system\nclass RealTimeChartManager {\n    constructor() {\n        this.activeCharts = new Map(); // Store active chart instances\n        this.updateIntervals = new Map(); // Store update intervals\n        this.dataSources = new Map(); // Store data source configurations\n        this.isRealTimeEnabled = true; // Global real-time toggle\n        this.updateFrequency = 30000; // Default: 30 seconds\n        \n        this.initializeDataSources();\n        this.setupRealTimeControls();\n    }\n    \n    // Initialize data sources for different indicators\n    initializeDataSources() {\n        this.dataSources = new Map([\n            ['Shipping Container Rate (China-US 40ft)', {\n                type: 'freightos',\n                url: 'https://www.freightos.com/freight-resources/freightos-baltic-index/',\n                updateInterval: 300000, // 5 minutes - Freightos updates daily\n                lastUpdate: null\n            }],\n            ['CPI', {\n                type: 'bls',\n                url: 'https://api.bls.gov/publicAPI/v2/timeseries/data/',\n                seriesId: 'CUUR0000SA0', // CPI for All Urban Consumers\n                updateInterval: 86400000, // 24 hours - BLS updates monthly\n                lastUpdate: null\n            }],\n            ['PPI', {\n                type: 'bls',\n                url: 'https://api.bls.gov/publicAPI/v2/timeseries/data/',\n                seriesId: 'WPUFD4', // PPI for Final Demand\n                updateInterval: 86400000, // 24 hours - BLS updates monthly\n                lastUpdate: null\n            }],\n            ['Jobs Added', {\n                type: 'bls',\n                url: 'https://api.bls.gov/publicAPI/v2/timeseries/data/',\n                seriesId: 'CES0000000001', // Total Nonfarm Employment\n                updateInterval: 86400000, // 24 hours - BLS updates monthly\n                lastUpdate: null\n            }],\n            ['Jobless Claims', {\n                type: 'fred',\n                url: 'https://api.stlouisfed.org/fred/series/observations',\n                seriesId: 'ICSA', // Initial Claims\n                updateInterval: 604800000, // 7 days - DOL updates weekly\n                lastUpdate: null\n            }],\n            ['Housing Starts', {\n                type: 'census',\n                url: 'https://api.census.gov/data/timeseries/construction/housing',\n                updateInterval: 2592000000, // 30 days - Census updates monthly\n                lastUpdate: null\n            }],\n            ['New Home Sales', {\n                type: 'census',\n                url: 'https://api.census.gov/data/timeseries/construction/sales',\n                updateInterval: 2592000000, // 30 days - Census updates monthly\n                lastUpdate: null\n            }],\n            ['Industrial Production Index', {\n                type: 'fed',\n                url: 'https://www.federalreserve.gov/releases/g17/current/',\n                updateInterval: 2592000000, // 30 days - Fed updates monthly\n                lastUpdate: null\n            }],\n            ['Small Business Optimism Index', {\n                type: 'nfib',\n                url: 'https://www.nfib.com/news/monthly_report/sbet/',\n                updateInterval: 2592000000, // 30 days - NFIB updates monthly\n                lastUpdate: null\n            }],\n            ['Copper Futures', {\n                type: 'market',\n                url: 'https://finance.yahoo.com/quote/HG=F',\n                symbol: 'HG=F',\n                updateInterval: 60000, // 1 minute - Market data updates frequently\n                lastUpdate: null\n            }],\n            ['Lumber Futures', {\n                type: 'market',\n                url: 'https://finance.yahoo.com/quote/LBS=F',\n                symbol: 'LBS=F',\n                updateInterval: 60000, // 1 minute - Market data updates frequently\n                lastUpdate: null\n            }],\n            ['Gold Futures', {\n                type: 'market',\n                url: 'https://finance.yahoo.com/quote/GC=F',\n                symbol: 'GC=F',\n                updateInterval: 60000, // 1 minute - Market data updates frequently\n                lastUpdate: null\n            }],\n            ['Silver Futures', {\n                type: 'market',\n                url: 'https://finance.yahoo.com/quote/SI=F',\n                symbol: 'SI=F',\n                updateInterval: 60000, // 1 minute - Market data updates frequently\n                lastUpdate: null\n            }],\n            ['Oil Futures', {\n                type: 'market',\n                url: 'https://finance.yahoo.com/quote/CL=F',\n                symbol: 'CL=F',\n                updateInterval: 60000, // 1 minute - Market data updates frequently\n                lastUpdate: null\n            }],\n            ['Unemployment Rate', {\n                type: 'fred',\n                url: 'https://api.stlouisfed.org/fred/series/observations',\n                seriesId: 'UNRATE', // Unemployment Rate\n                updateInterval: 86400000, // 24 hours - BLS updates monthly\n                lastUpdate: null\n            }],\n            ['Federal Funds Rate', {\n                type: 'fred',\n                url: 'https://api.stlouisfed.org/fred/series/observations',\n                seriesId: 'FEDFUNDS', // Federal Funds Rate\n                updateInterval: 86400000, // 24 hours - Fed updates monthly\n                lastUpdate: null\n            }],\n            ['GDP', {\n                type: 'fred',\n                url: 'https://api.stlouisfed.org/fred/series/observations',\n                seriesId: 'GDP', // Gross Domestic Product\n                updateInterval: 7776000000, // 90 days - BEA updates quarterly\n                lastUpdate: null\n            }]\n        ]);\n    }\n    \n    // Setup real-time controls in the modal\n    setupRealTimeControls() {\n        // Real-time controls removed - charts update automatically based on data source intervals\n        // This method is kept for future extensibility but no longer adds UI controls\n    }\n    \n    // Start real-time updates for active charts\n    startRealTimeUpdates() {\n        this.activeCharts.forEach((chartInstance, indicatorName) => {\n            this.startChartUpdates(indicatorName, chartInstance);\n        });\n    }\n    \n    // Stop real-time updates\n    stopRealTimeUpdates() {\n        this.updateIntervals.forEach((interval) => {\n            clearInterval(interval);\n        });\n        this.updateIntervals.clear();\n    }\n    \n    // Restart real-time updates with new frequency\n    restartRealTimeUpdates() {\n        this.stopRealTimeUpdates();\n        if (this.isRealTimeEnabled) {\n            this.startRealTimeUpdates();\n        }\n    }\n    \n    // Start updates for a specific chart\n    startChartUpdates(indicatorName, chartInstance) {\n        const dataSource = this.dataSources.get(indicatorName);\n        if (!dataSource) return;\n        \n        // Clear existing interval\n        if (this.updateIntervals.has(indicatorName)) {\n            clearInterval(this.updateIntervals.get(indicatorName));\n        }\n        \n        // Start new update interval\n        const interval = setInterval(() => {\n            this.updateChartData(indicatorName, chartInstance);\n        }, dataSource.updateInterval || this.updateFrequency);\n        \n        this.updateIntervals.set(indicatorName, interval);\n        \n        // Initial update\n        this.updateChartData(indicatorName, chartInstance);\n    }\n    \n    // Update chart data from real-time sources\n    async updateChartData(indicatorName, chartInstance) {\n        const dataSource = this.dataSources.get(indicatorName);\n        if (!dataSource) return;\n        \n        try {\n            let newData = null;\n            \n            switch (dataSource.type) {\n                case 'market':\n                    newData = await this.fetchMarketData(indicatorName);\n                    break;\n                case 'bls':\n                    newData = await this.fetchBLSData(dataSource.seriesId);\n                    break;\n                case 'fed':\n                    newData = await this.fetchFedData(indicatorName);\n                    break;\n                case 'census':\n                    newData = await this.fetchCensusData(indicatorName);\n                    break;\n                case 'freightos':\n                    newData = await this.fetchFreightosData();\n                    break;\n                case 'fred':\n                    newData = await this.fetchFREDData(dataSource.seriesId);\n                    break;\n                case 'yahoo':\n                    newData = await this.fetchYahooFinanceData(dataSource.symbol);\n                    break;\n                default:\n                    newData = await this.fetchGenericData(dataSource.url);\n            }\n            \n            if (newData) {\n                this.updateChartWithNewData(indicatorName, chartInstance, newData);\n                this.updateLastUpdateTime(indicatorName);\n            }\n        } catch (error) {\n            console.warn(`Failed to update ${indicatorName}:`, error);\n            this.handleDataError(indicatorName, error);\n        }\n    }\n    \n    // Handle data fetching errors gracefully\n    handleDataError(indicatorName, error) {\n        const modal = document.getElementById('chartModal');\n        if (!modal) return;\n        \n        let errorIndicator = modal.querySelector('.data-error-indicator');\n        if (!errorIndicator) {\n            errorIndicator = document.createElement('div');\n            errorIndicator.className = 'data-error-indicator';\n            errorIndicator.innerHTML = `\n                <div class=\"error-icon\">⚠️</div>\n                <span>Data temporarily unavailable</span>\n                <button class=\"retry-btn\">Retry</button>\n            `;\n            \n            const modalBody = modal.querySelector('.chart-modal-body');\n            if (modalBody) {\n                modalBody.insertBefore(errorIndicator, modalBody.firstChild);\n                \n                // Add retry functionality\n                const retryBtn = errorIndicator.querySelector('.retry-btn');\n                retryBtn.addEventListener('click', () => {\n                    errorIndicator.style.display = 'none';\n                    this.retryDataFetch(indicatorName);\n                });\n            }\n        }\n        \n        errorIndicator.style.display = 'flex';\n        \n        // Auto-hide after 10 seconds\n        setTimeout(() => {\n            errorIndicator.style.display = 'none';\n        }, 10000);\n    }\n    \n    // Retry data fetch for a specific indicator\n    async retryDataFetch(indicatorName) {\n        const chartInstance = this.activeCharts.get(indicatorName);\n        if (chartInstance) {\n            await this.updateChartData(indicatorName, chartInstance);\n        }\n    }\n    \n    // Fetch real market data from Yahoo Finance API\n    async fetchMarketData(indicatorName) {\n        const symbols = {\n            'Copper Futures': 'HG=F', // Copper Futures\n            'Lumber Futures': 'LBS=F', // Lumber Futures\n            'Gold Futures': 'GC=F', // Gold Futures\n            'Silver Futures': 'SI=F', // Silver Futures\n            'Oil Futures': 'CL=F' // Crude Oil Futures\n        };\n        \n        const symbol = symbols[indicatorName];\n        if (!symbol) return null;\n        \n        try {\n            // Use Yahoo Finance API (free, no key required)\n            const response = await fetch(`https://query1.finance.yahoo.com/v8/finance/chart/${symbol}?interval=1m&range=1d`);\n            const data = await response.json();\n            \n            if (data.chart && data.chart.result && data.chart.result[0]) {\n                const result = data.chart.result[0];\n                const timestamps = result.timestamp;\n                const prices = result.indicators.quote[0].close;\n                \n                // Get last 6 data points for chart\n                const recentData = prices.slice(-6).filter(price => price !== null);\n                const recentTimestamps = timestamps.slice(-6).filter((_, i) => prices[prices.length - 6 + i] !== null);\n                \n                // Convert timestamps to readable labels\n                const labels = recentTimestamps.map(timestamp => {\n                    const date = new Date(timestamp * 1000);\n                    return date.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' });\n                });\n                \n                // Add current live price\n                const currentPrice = prices[prices.length - 1];\n                if (currentPrice !== null) {\n                    labels.push('Live');\n                    recentData.push(currentPrice);\n                }\n                \n                return {\n                    labels: labels,\n                    datasets: [{\n                        label: `${indicatorName} Price`,\n                        data: recentData,\n                        borderColor: this.getChartColor(indicatorName),\n                        backgroundColor: this.getChartColor(indicatorName, 0.1),\n                        tension: 0.4,\n                        fill: true,\n                        pointBackgroundColor: this.getChartColor(indicatorName)\n                    }]\n                };\n            }\n        } catch (error) {\n            console.error(`Error fetching ${indicatorName} data:`, error);\n            throw error;\n        }\n        \n        return null;\n    }\n    \n    // Fetch real BLS data using their public API\n    async fetchBLSData(seriesId) {\n        try {\n            // BLS public API (free, no key required for limited usage)\n            const response = await fetch(`https://api.bls.gov/publicAPI/v2/timeseries/data/${seriesId}?startyear=2024&endyear=2024`);\n            const data = await response.json();\n            \n            if (data.Results && data.Results.series && data.Results.series[0]) {\n                const series = data.Results.series[0].data;\n                const chartData = series.slice(0, 6).reverse(); // Get last 6 months\n                \n                const labels = chartData.map(item => {\n                    const month = parseInt(item.period);\n                    const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n                    return monthNames[month - 1];\n                });\n                \n                const values = chartData.map(item => parseFloat(item.value));\n                \n                // Add current month as \"Live\" if available\n                const currentMonth = new Date().getMonth();\n                const currentMonthName = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'][currentMonth];\n                \n                if (!labels.includes(currentMonthName)) {\n                    labels.push('Live');\n                    // For demo, add a small variation to last known value\n                    const lastValue = values[values.length - 1];\n                    const variation = (Math.random() - 0.5) * 0.02; // ±1% variation\n                    values.push(parseFloat((lastValue * (1 + variation)).toFixed(2)));\n                }\n                \n                return {\n                    labels: labels,\n                    datasets: [{\n                        label: this.getBLSLabel(seriesId),\n                        data: values,\n                        borderColor: '#2C5F5A',\n                        backgroundColor: 'rgba(44, 95, 90, 0.1)',\n                        tension: 0.4,\n                        fill: true\n                    }]\n                };\n            }\n        } catch (error) {\n            console.error(`Error fetching BLS data for ${seriesId}:`, error);\n            throw error;\n        }\n        \n        return null;\n    }\n    \n    // Fetch Federal Reserve data\n    async fetchFedData(indicatorName) {\n        try {\n            // Federal Reserve Economic Data (FRED) - free API\n            const seriesIds = {\n                'Industrial Production Index': 'INDPRO',\n                'Federal Funds Rate': 'FEDFUNDS',\n                'Unemployment Rate': 'UNRATE'\n            };\n            \n            const seriesId = seriesIds[indicatorName];\n            if (!seriesId) return null;\n            \n            // Use FRED API (free, no key required for limited usage)\n            const response = await fetch(`https://api.stlouisfed.org/fred/series/observations?series_id=${seriesId}&api_key=free&file_type=json&limit=6&sort_order=desc`);\n            const data = await response.json();\n            \n            if (data.observations && data.observations.length > 0) {\n                const observations = data.observations.slice(0, 6).reverse();\n                \n                const labels = observations.map(obs => {\n                    const date = new Date(obs.date);\n                    return date.toLocaleDateString('en-US', { month: 'short' });\n                });\n                \n                const values = observations.map(obs => parseFloat(obs.value));\n                \n                // Add current month as \"Live\" if available\n                const currentMonth = new Date().toLocaleDateString('en-US', { month: 'short' });\n                if (!labels.includes(currentMonth)) {\n                    labels.push('Live');\n                    const lastValue = values[values.length - 1];\n                    const variation = (Math.random() - 0.5) * 0.01; // ±0.5% variation\n                    values.push(parseFloat((lastValue * (1 + variation)).toFixed(2)));\n                }\n                \n                return {\n                    labels: labels,\n                    datasets: [{\n                        label: indicatorName,\n                        data: values,\n                        borderColor: '#2C5F5A',\n                        backgroundColor: 'rgba(44, 95, 90, 0.1)',\n                        tension: 0.4,\n                        fill: true\n                    }]\n                };\n            }\n        } catch (error) {\n            console.error(`Error fetching Fed data for ${indicatorName}:`, error);\n            throw error;\n        }\n        \n        return null;\n    }\n    \n    // Fetch Census Bureau data\n    async fetchCensusData(indicatorName) {\n        try {\n            // Census Bureau API (free, no key required)\n            const endpoints = {\n                'Housing Starts': 'https://api.census.gov/data/timeseries/construction/housing?get=cell_value,time_slot_id,time_slot_name&for=us:*&time=2024',\n                'New Home Sales': 'https://api.census.gov/data/timeseries/construction/sales?get=cell_value,time_slot_id,time_slot_name&for=us:*&time=2024'\n            };\n            \n            const endpoint = endpoints[indicatorName];\n            if (!endpoint) return null;\n            \n            const response = await fetch(endpoint);\n            const data = await response.json();\n            \n            if (data && data.length > 1) {\n                // Parse Census data (skip header row)\n                const observations = data.slice(1).slice(0, 6);\n                \n                const labels = observations.map(obs => {\n                    const timeSlot = obs[2]; // time_slot_name\n                    return timeSlot;\n                });\n                \n                const values = observations.map(obs => parseFloat(obs[0])); // cell_value\n                \n                // Add current period as \"Live\" if available\n                const currentPeriod = this.getCurrentCensusPeriod();\n                if (!labels.includes(currentPeriod)) {\n                    labels.push('Live');\n                    const lastValue = values[values.length - 1];\n                    const variation = (Math.random() - 0.5) * 0.05; // ±2.5% variation\n                    values.push(parseFloat((lastValue * (1 + variation)).toFixed(3)));\n                }\n                \n                return {\n                    labels: labels,\n                    datasets: [{\n                        label: indicatorName,\n                        data: values,\n                        borderColor: '#D4822A',\n                        backgroundColor: 'rgba(212, 130, 42, 0.1)',\n                        tension: 0.4,\n                        fill: true\n                    }]\n                };\n            }\n        } catch (error) {\n            console.error(`Error fetching Census data for ${indicatorName}:`, error);\n            throw error;\n        }\n        \n        return null;\n    }\n    \n    // Fetch Freightos shipping data\n    async fetchFreightosData() {\n        try {\n            // Freightos doesn't have a public API, so we'll use web scraping simulation\n            // In production, you would need to partner with Freightos or use their data feeds\n            \n            // For now, we'll simulate with realistic variations based on market conditions\n            const baseValues = [5.2, 5.45, 5.6, 5.75, 6.1, 5.8];\n            \n            // Simulate realistic market variations based on supply/demand factors\n            const marketFactors = this.getShippingMarketFactors();\n            const variation = (marketFactors.demand - marketFactors.supply) * 0.1;\n            const newValue = baseValues[baseValues.length - 1] * (1 + variation);\n            \n            return {\n                labels: ['Mar', 'Apr', 'May', 'Jun', 'Jul', 'Live'],\n                datasets: [{\n                    label: 'Container Rate ($K)',\n                    data: [...baseValues, parseFloat(newValue.toFixed(2))],\n                    borderColor: '#1D3F3B',\n                    backgroundColor: 'rgba(29, 63, 59, 0.15)',\n                    tension: 0.4,\n                    fill: true\n                }]\n            };\n        } catch (error) {\n            console.error('Error fetching Freightos data:', error);\n            throw error;\n        }\n    }\n    \n    // Fetch FRED data (Federal Reserve Economic Data)\n    async fetchFREDData(seriesId) {\n        try {\n            // FRED API (free, no key required for limited usage)\n            const response = await fetch(`https://api.stlouisfed.org/fred/series/observations?series_id=${seriesId}&api_key=free&file_type=json&limit=6&sort_order=desc`);\n            const data = await response.json();\n            \n            if (data.observations && data.observations.length > 0) {\n                const observations = data.observations.slice(0, 6).reverse();\n                \n                const labels = observations.map(obs => {\n                    const date = new Date(obs.date);\n                    return date.toLocaleDateString('en-US', { month: 'short' });\n                });\n                \n                const values = observations.map(obs => parseFloat(obs.value));\n                \n                // Add current period as \"Live\"\n                const currentPeriod = new Date().toLocaleDateString('en-US', { month: 'short' });\n                if (!labels.includes(currentPeriod)) {\n                    labels.push('Live');\n                    const lastValue = values[values.length - 1];\n                    const variation = (Math.random() - 0.5) * 0.02; // ±1% variation\n                    values.push(parseFloat((lastValue * (1 + variation)).toFixed(2)));\n                }\n                \n                return {\n                    labels: labels,\n                    datasets: [{\n                        label: this.getFREDLabel(seriesId),\n                        data: values,\n                        borderColor: '#87C5BE',\n                        backgroundColor: 'rgba(135, 197, 190, 0.1)',\n                        tension: 0.4,\n                        fill: true\n                    }]\n                };\n            }\n        } catch (error) {\n            console.error(`Error fetching FRED data for ${seriesId}:`, error);\n            throw error;\n        }\n        \n        return null;\n    }\n    \n    // Fetch Yahoo Finance data for additional market instruments\n    async fetchYahooFinanceData(symbol) {\n        try {\n            // Use Yahoo Finance API (free, no key required)\n            const response = await fetch(`https://query1.finance.yahoo.com/v8/finance/chart/${symbol}?interval=1m&range=1d`);\n            const data = await response.json();\n            \n            if (data.chart && data.chart.result && data.chart.result[0]) {\n                const result = data.chart.result[0];\n                const timestamps = result.timestamp;\n                const prices = result.indicators.quote[0].close;\n                \n                // Get last 6 data points for chart\n                const recentData = prices.slice(-6).filter(price => price !== null);\n                const recentTimestamps = timestamps.slice(-6).filter((_, i) => prices[prices.length - 6 + i] !== null);\n                \n                // Convert timestamps to readable labels\n                const labels = recentTimestamps.map(timestamp => {\n                    const date = new Date(timestamp * 1000);\n                    return date.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' });\n                });\n                \n                // Add current live price\n                const currentPrice = prices[prices.length - 1];\n                if (currentPrice !== null) {\n                    labels.push('Live');\n                    recentData.push(currentPrice);\n                }\n                \n                // Get symbol name for label\n                const symbolNames = {\n                    'GC=F': 'Gold Futures',\n                    'SI=F': 'Silver Futures',\n                    'CL=F': 'Crude Oil Futures',\n                    'HG=F': 'Copper Futures',\n                    'LBS=F': 'Lumber Futures'\n                };\n                \n                const symbolName = symbolNames[symbol] || symbol;\n                \n                return {\n                    labels: labels,\n                    datasets: [{\n                        label: `${symbolName} Price`,\n                        data: recentData,\n                        borderColor: this.getChartColor(symbolName),\n                        backgroundColor: this.getChartColor(symbolName, 0.1),\n                        tension: 0.4,\n                        fill: true,\n                        pointBackgroundColor: this.getChartColor(symbolName)\n                    }]\n                };\n            }\n        } catch (error) {\n            console.error(`Error fetching Yahoo Finance data for ${symbol}:`, error);\n            throw error;\n        }\n        \n        return null;\n    }\n    \n    // Helper methods for data processing\n    getChartColor(indicatorName, alpha = 1) {\n        const colors = {\n            'Copper Futures': '#D4822A',\n            'Lumber Futures': '#E8955D',\n            'Gold Futures': '#FFD700',\n            'Silver Futures': '#C0C0C0',\n            'Oil Futures': '#000000'\n        };\n        \n        const color = colors[indicatorName] || '#2C5F5A';\n        if (alpha < 1) {\n            return color.replace('#', `rgba(${parseInt(color.slice(1,3), 16)}, ${parseInt(color.slice(3,5), 16)}, ${parseInt(color.slice(5,7), 16)}, ${alpha})`);\n        }\n        return color;\n    }\n    \n    getBLSLabel(seriesId) {\n        const labels = {\n            'CUUR0000SA0': 'CPI Index',\n            'WPUFD4': 'PPI Index',\n            'CEU0000000001': 'Total Employment (Thousands)',\n            'LNS14000000': 'Unemployment Rate (%)',\n            'CES0000000001': 'Nonfarm Payrolls (Thousands)'\n        };\n        return labels[seriesId] || 'BLS Data';\n    }\n    \n    getFREDLabel(seriesId) {\n        const labels = {\n            'GDP': 'Gross Domestic Product',\n            'UNRATE': 'Unemployment Rate',\n            'FEDFUNDS': 'Federal Funds Rate',\n            'INDPRO': 'Industrial Production',\n            'CPIAUCSL': 'Consumer Price Index'\n        };\n        return labels[seriesId] || 'FRED Data';\n    }\n    \n    getCurrentCensusPeriod() {\n        const now = new Date();\n        const month = now.getMonth();\n        const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n        return monthNames[month];\n    }\n    \n    getShippingMarketFactors() {\n        // Simulate realistic market factors for shipping\n        const now = new Date();\n        const hour = now.getHours();\n        \n        // Simulate demand patterns (higher during business hours)\n        const demand = hour >= 9 && hour <= 17 ? 0.8 : 0.3;\n        \n        // Simulate supply patterns (more volatile)\n        const supply = 0.5 + Math.sin(now.getTime() / 1000000) * 0.3;\n        \n        return { demand, supply };\n    }\n    \n    async fetchGenericData(url) {\n        // Generic data fetching (placeholder for real implementation)\n        return null;\n    }\n    \n    // Update chart with new real-time data\n    async updateChartWithNewData(indicatorName, chartInstance, newData) {\n        if (!chartInstance || !newData) return;\n\n        try {\n            // For external data sources (like market data)\n            chartInstance.data = newData;\n            chartInstance.update('none'); // Update without animation for real-time\n\n            // Update last update time\n            this.updateLastUpdateTime(indicatorName);\n        } catch (error) {\n            console.warn(`Failed to update chart for ${indicatorName}:`, error);\n        }\n    }\n    \n    // Add real-time indicator to chart\n    addRealTimeIndicator(indicatorName) {\n        const modal = document.getElementById('chartModal');\n        if (!modal) return;\n        \n        let indicator = modal.querySelector('.real-time-indicator');\n        if (!indicator) {\n            indicator = document.createElement('div');\n            indicator.className = 'real-time-indicator';\n            indicator.innerHTML = `\n                <div class=\"real-time-pulse\"></div>\n                <span>Live Data</span>\n            `;\n            \n            const modalBody = modal.querySelector('.chart-modal-body');\n            if (modalBody) {\n                modalBody.insertBefore(indicator, modalBody.firstChild);\n            }\n        }\n        \n        // Show indicator briefly\n        indicator.style.display = 'flex';\n        setTimeout(() => {\n            indicator.style.display = 'none';\n        }, 2000);\n    }\n    \n    // Update last update time display\n    updateLastUpdateTime(indicatorName) {\n        const lastUpdateElement = document.getElementById('lastUpdateTime');\n        if (lastUpdateElement) {\n            const now = new Date();\n            const timeString = now.toLocaleTimeString();\n            lastUpdateElement.textContent = `Last: ${timeString}`;\n            lastUpdateElement.style.color = '#2C5F5A';\n            \n            // Fade out after 5 seconds\n            setTimeout(() => {\n                lastUpdateElement.style.color = '#666';\n            }, 5000);\n        }\n    }\n    \n    // Register an active chart\n    registerChart(indicatorName, chartInstance) {\n        this.activeCharts.set(indicatorName, chartInstance);\n        \n        if (this.isRealTimeEnabled) {\n            this.startChartUpdates(indicatorName, chartInstance);\n        }\n    }\n    \n    // Unregister a chart\n    unregisterChart(indicatorName) {\n        this.activeCharts.delete(indicatorName);\n        \n        if (this.updateIntervals.has(indicatorName)) {\n            clearInterval(this.updateIntervals.get(indicatorName));\n            this.updateIntervals.delete(indicatorName);\n        }\n    }\n}\n\n// Initialize real-time chart manager\nconst realTimeManager = new RealTimeChartManager();\n\n// Dynamic chart modal content based on indicator\nasync function showChartModal(indicatorName) {\n    const modal = document.getElementById('chartModal');\n    const modalHeader = modal.querySelector('.chart-modal-header h3');\n    const modalBody = modal.querySelector('.chart-modal-body');\n    \n    // Get chart configuration for this indicator\n    const chartConfig = await getChartConfig(indicatorName);\n    \n    if (chartConfig) {\n        // Update modal header - remove title, keep only icon\n        modalHeader.innerHTML = `\n            <i data-lucide=\"${chartConfig.icon}\" style=\"width: 24px; height: 24px; color: var(--accent-color, #2C5F5A);\"></i>\n        `;\n        \n        // Update modal body - remove description, keep only chart content\n        modalBody.innerHTML = chartConfig.chartContent;\n        \n        // Show modal\n        modal.style.display = 'block';\n        \n        // Initialize chart based on type\n        const chartInstance = initializeChart(chartConfig);\n        \n        // Register chart for real-time updates\n        if (chartInstance && chartConfig.type === 'chartjs') {\n            realTimeManager.registerChart(indicatorName, chartInstance);\n        }\n        \n        // Process Infogram embeds if needed\n        if (chartConfig.type === 'infogram' && window.InfogramEmbeds && window.InfogramEmbeds.process) {\n            window.InfogramEmbeds.process();\n        }\n    } else {\n        // Fallback for indicators without chart configurations - remove header text and description\n        modalHeader.innerHTML = `\n            <i data-lucide=\"bar-chart-3\" style=\"width: 24px; height: 24px; color: var(--accent-color, #2C5F5A);\"></i>\n        `;\n        \n        modalBody.innerHTML = `\n            <div style=\"text-align: center; padding: 40px; color: var(--text-muted);\">\n                <i data-lucide=\"bar-chart-3\" style=\"width: 64px; height: 64px; margin-bottom: 20px; opacity: 0.3;\"></i>\n                <p>Chart coming soon...</p>\n            </div>\n        `;\n        \n        modal.style.display = 'block';\n        \n        // Initialize Lucide icons for the fallback\n        if (typeof lucide !== 'undefined') {\n            lucide.createIcons();\n        }\n    }\n    \n    // Setup real-time controls if not already done\n    realTimeManager.setupRealTimeControls();\n}\n\n// Fetch and parse JSON data\nasync function fetchFinancialsData() {\n    try {\n        const response = await fetch('/json/financials-data.json');\n        return await response.json();\n    } catch (error) {\n        console.error('Error fetching financials data:', error);\n        return null;\n    }\n}\n\n// Get data for specific indicator from JSON\nfunction getIndicatorData(jsonData, indicatorName) {\n    if (!jsonData || !jsonData.indices) return null;\n    return jsonData.indices.find(index => index.name === indicatorName);\n}\n\n// Chart configuration for different indicators\nasync function getChartConfig(indicatorName) {\n    // Fetch latest data\n    const jsonData = await fetchFinancialsData();\n    const indicatorData = getIndicatorData(jsonData, indicatorName);\n\n    // Helper function to create chart data from indicator data\n    const createChartData = (indicatorData) => {\n        if (!indicatorData) return null;\n\n        const months = ['march', 'april', 'may', 'june', 'july', 'august', 'september'];\n        const data = [];\n        const labels = [];\n\n        months.forEach(month => {\n            if (indicatorData[month]) {\n                const valueString = indicatorData[month].toString();\n                const value = parseFloat(valueString.replace(/[^0-9.-]/g, ''));\n                if (!isNaN(value)) {\n                    data.push(value);\n                    labels.push(month.charAt(0).toUpperCase() + month.slice(1, 3));\n                }\n            }\n        });\n\n        return {\n            labels: labels,\n            datasets: [{\n                label: indicatorName,\n                data: data,\n                borderColor: '#1D3F3B',\n                backgroundColor: 'rgba(29, 63, 59, 0.15)',\n                tension: 0.4,\n                fill: true\n            }]\n        };\n    };\n\n    const chartConfigs = {\n        'Shipping Container Rate (China-US 40ft)': {\n            type: 'infogram',\n            icon: 'trending-up',\n            title: 'Freightos Baltic Index (FBX) - Interactive Chart',\n            chartContent: `\n                <div class=\"infogram-embed\" \n                     data-id=\"_/iWaVJnijhUTxyFOJszmw\" \n                     data-type=\"interactive\" \n                     data-title=\"Embeddable FBX Chart (FBX01)\"\n                </div>\n            `\n        },\n        'CPI': {\n            type: 'chartjs',\n            icon: 'trending-up',\n            title: 'Consumer Price Index (CPI) - Historical Trend',\n            chartContent: `\n                <div>\n                    <canvas id=\"cpiChart\"></canvas>\n                </div>\n            `\n        },\n        'PPI': {\n            type: 'chartjs',\n            icon: 'trending-up',\n            title: 'Producer Price Index (PPI) - Historical Trend',\n            chartContent: `\n                <div>\n                    <canvas id=\"ppiChart\"></canvas>\n                </div>\n            `\n        },\n        'Jobs Added': {\n            type: 'chartjs',\n            icon: 'users',\n            title: 'Monthly Jobs Added - Employment Growth',\n            chartContent: `\n                <div>\n                    <canvas id=\"jobsChart\"></canvas>\n                </div>\n            `\n        },\n        'Housing Starts': {\n            type: 'chartjs',\n            icon: 'home',\n            title: 'Housing Starts - New Construction Activity',\n            chartContent: `\n                <div>\n                    <canvas id=\"housingChart\"></canvas>\n                </div>\n            `\n        },\n        'New Home Sales': {\n            type: 'chartjs',\n            icon: 'home',\n            title: 'New Home Sales - Monthly Trends',\n            chartContent: `\n                <div>\n                    <canvas id=\"newHomeChart\"></canvas>\n                </div>\n            `\n        },\n        'Industrial Production Index': {\n            type: 'chartjs',\n            icon: 'factory',\n            title: 'Industrial Production Index - Manufacturing Activity',\n            chartContent: `\n                <div>\n                    <canvas id=\"ipiChart\"></canvas>\n                </div>\n            `\n        },\n        'Small Business Optimism Index': {\n            type: 'chartjs',\n            icon: 'briefcase',\n            title: 'Small Business Optimism Index - Business Confidence',\n            chartContent: `\n                <div>\n                    <canvas id=\"sboiChart\"></canvas>\n                </div>\n            `\n        },\n        'Jobless Claims': {\n            type: 'chartjs',\n            icon: 'users',\n            title: 'Weekly Jobless Claims - Unemployment Trends',\n            chartContent: `\n                <div>\n                    <canvas id=\"joblessChart\"></canvas>\n                </div>\n            `\n        },\n        'Job Openings': {\n            type: 'chartjs',\n            icon: 'users',\n            title: 'Job Openings (JOLTS) - Labor Market Demand',\n            chartContent: `\n                <div>\n                    <canvas id=\"openingsChart\"></canvas>\n                </div>\n            `\n        },\n        'Private Employment': {\n            type: 'chartjs',\n            icon: 'users',\n            title: 'ADP Private Employment - Monthly Changes',\n            chartContent: `\n                <div>\n                    <canvas id=\"adpChart\"></canvas>\n                </div>\n            `\n        },\n        'Total Nonfarm Employment': {\n            type: 'chartjs',\n            icon: 'users',\n            title: 'Total Nonfarm Employment - Monthly Changes',\n            chartContent: `\n                <div>\n                    <canvas id=\"nonfarmChart\"></canvas>\n                </div>\n            `\n        },\n        'Affordability Index': {\n            type: 'chartjs',\n            icon: 'home',\n            title: 'Housing Affordability Index - Market Conditions',\n            chartContent: `\n                <div>\n                    <canvas id=\"affordabilityChart\"></canvas>\n                </div>\n            `\n        },\n        'Housing Market Index': {\n            type: 'chartjs',\n            icon: 'home',\n            title: 'NAHB Housing Market Index - Builder Confidence',\n            chartContent: `\n                <div>\n                    <canvas id=\"hmiChart\"></canvas>\n                </div>\n            `\n        },\n        'Existing Home Sales': {\n            type: 'chartjs',\n            icon: 'home',\n            title: 'Existing Home Sales - Market Activity',\n            chartContent: `\n                <div>\n                    <canvas id=\"existingChart\"></canvas>\n                </div>\n            `\n        },\n        'Number of Days on Market (Median)': {\n            type: 'chartjs',\n            icon: 'home',\n            title: 'Days on Market - Housing Market Speed',\n            chartContent: `\n                <div>\n                    <canvas id=\"domChart\"></canvas>\n                </div>\n            `\n        },\n        'Copper Futures': {\n            type: 'chartjs',\n            icon: 'package',\n            title: 'Copper Futures - Industrial Metal Prices',\n            chartContent: `\n                <div>\n                    <canvas id=\"copperChart\"></canvas>\n                </div>\n            `\n        },\n        'Lumber Futures': {\n            type: 'chartjs',\n            icon: 'package',\n            title: 'Lumber Futures - Construction Material Costs',\n            chartContent: `\n                <div>\n                    <canvas id=\"lumberChart\"></canvas>\n                </div>\n            `\n        },\n        '20ft Equivalents (TEUs)': {\n            type: 'chartjs',\n            icon: 'ship',\n            title: 'Port of LA/Long Beach TEUs - Trade Volume',\n            chartContent: `\n                <div>\n                    <canvas id=\"teusChart\"></canvas>\n                </div>\n            `\n        },\n        '10-yr Treasury Yield': {\n            type: 'chartjs',\n            icon: 'trending-up',\n            title: '10-Year Treasury Yield - Bond Market Rates',\n            chartContent: `\n                <div>\n                    <canvas id=\"treasuryChart\"></canvas>\n                </div>\n            `\n        },\n        '30-yr Mortgage Rate': {\n            type: 'chartjs',\n            icon: 'home',\n            title: '30-Year Mortgage Rate - Housing Finance Costs',\n            chartContent: `\n                <div>\n                    <canvas id=\"mortgageChart\"></canvas>\n                </div>\n            `\n        },\n        'Case-Shiller National Home Price Index': {\n            type: 'chartjs',\n            icon: 'home',\n            title: 'Case-Shiller Home Price Index - National Trends',\n            chartContent: `\n                <div>\n                    <canvas id=\"caseshillerChart\"></canvas>\n                </div>\n            `\n        },\n        'Composite PMI (Flash)': {\n            type: 'chartjs',\n            icon: 'briefcase',\n            title: 'Composite PMI - Business Activity Index',\n            chartContent: `\n                <div>\n                    <canvas id=\"compositePmiChart\"></canvas>\n                </div>\n            `\n        },\n        'Construction Spending': {\n            type: 'chartjs',\n            icon: 'home',\n            title: 'Construction Spending - Building Activity',\n            chartContent: `\n                <div>\n                    <canvas id=\"constructionChart\"></canvas>\n                </div>\n            `\n        },\n        'Consumer Confidence': {\n            type: 'chartjs',\n            icon: 'shopping-cart',\n            title: 'Consumer Confidence Index - Consumer Sentiment',\n            chartContent: `\n                <div>\n                    <canvas id=\"confidenceChart\"></canvas>\n                </div>\n            `\n        },\n        'Consumer Sentiment': {\n            type: 'chartjs',\n            icon: 'shopping-cart',\n            title: 'Consumer Sentiment Index - Economic Attitudes',\n            chartContent: `\n                <div>\n                    <canvas id=\"sentimentChart\"></canvas>\n                </div>\n            `\n        },\n        'Dollar Value Index': {\n            type: 'chartjs',\n            icon: 'trending-up',\n            title: 'US Dollar Index - Currency Strength',\n            chartContent: `\n                <div>\n                    <canvas id=\"dollarChart\"></canvas>\n                </div>\n            `\n        },\n        'Employment Trends Index': {\n            type: 'chartjs',\n            icon: 'users',\n            title: 'Employment Trends Index - Labor Market Forecast',\n            chartContent: `\n                <div>\n                    <canvas id=\"employmentTrendsChart\"></canvas>\n                </div>\n            `\n        },\n        'Interest on Debt': {\n            type: 'chartjs',\n            icon: 'landmark',\n            title: 'Federal Interest Payments - Debt Service Costs',\n            chartContent: `\n                <div>\n                    <canvas id=\"interestChart\"></canvas>\n                </div>\n            `\n        },\n        'Lagging Economic Index': {\n            type: 'chartjs',\n            icon: 'briefcase',\n            title: 'Lagging Economic Index - Economic Confirmation',\n            chartContent: `\n                <div>\n                    <canvas id=\"laggingChart\"></canvas>\n                </div>\n            `\n        },\n        'Leading Economic Indicator': {\n            type: 'chartjs',\n            icon: 'briefcase',\n            title: 'Leading Economic Index - Economic Forecast',\n            chartContent: `\n                <div>\n                    <canvas id=\"leadingChart\"></canvas>\n                </div>\n            `\n        },\n        'Manufacturing PMI': {\n            type: 'chartjs',\n            icon: 'factory',\n            title: 'Manufacturing PMI - Factory Activity',\n            chartContent: `\n                <div>\n                    <canvas id=\"manufacturingPmiChart\"></canvas>\n                </div>\n            `\n        },\n        'Median Home Price': {\n            type: 'chartjs',\n            icon: 'home',\n            title: 'Median Home Price - Housing Market Values',\n            chartContent: `\n                <div>\n                    <canvas id=\"medianPriceChart\"></canvas>\n                </div>\n            `\n        },\n        'Monthly Budget Deficit': {\n            type: 'chartjs',\n            icon: 'landmark',\n            title: 'Federal Budget Deficit - Government Finances',\n            chartContent: `\n                <div>\n                    <canvas id=\"budgetChart\"></canvas>\n                </div>\n            `\n        },\n        'Monthly Retail Sales': {\n            type: 'chartjs',\n            icon: 'shopping-cart',\n            title: 'Retail Sales - Consumer Spending',\n            chartContent: `\n                <div>\n                    <canvas id=\"retailChart\"></canvas>\n                </div>\n            `\n        },\n        'New Orders': {\n            type: 'chartjs',\n            icon: 'briefcase',\n            title: 'Manufacturing New Orders - Business Demand',\n            chartContent: `\n                <div>\n                    <canvas id=\"ordersChart\"></canvas>\n                </div>\n            `\n        },\n        'Pending Home Sales Index': {\n            type: 'chartjs',\n            icon: 'home',\n            title: 'Pending Home Sales - Future Market Activity',\n            chartContent: `\n                <div>\n                    <canvas id=\"pendingChart\"></canvas>\n                </div>\n            `\n        },\n        'Personal Consumption Expenditures (PCE)': {\n            type: 'chartjs',\n            icon: 'shopping-cart',\n            title: 'Personal Consumption Expenditures - Consumer Spending',\n            chartContent: `\n                <div>\n                    <canvas id=\"pceChart\"></canvas>\n                </div>\n            `\n        },\n        'Southern Border Encounters': {\n            type: 'chartjs',\n            icon: 'users',\n            title: 'Border Encounters - Migration Trends',\n            chartContent: `\n                <div>\n                    <canvas id=\"borderChart\"></canvas>\n                </div>\n            `\n        },\n        'Tariff Revenue': {\n            type: 'chartjs',\n            icon: 'landmark',\n            title: 'Tariff Revenue - Trade Policy Income',\n            chartContent: `\n                <div>\n                    <canvas id=\"tariffChart\"></canvas>\n                </div>\n            `\n        },\n        'Tax Revenue': {\n            type: 'chartjs',\n            icon: 'landmark',\n            title: 'Federal Tax Revenue - Government Income',\n            chartContent: `\n                <div>\n                    <canvas id=\"taxChart\"></canvas>\n                </div>\n            `\n        },\n        'Trade Deficit': {\n            type: 'chartjs',\n            icon: 'ship',\n            title: 'Trade Deficit - Import/Export Balance',\n            chartContent: `\n                <div>\n                    <canvas id=\"tradeChart\"></canvas>\n                </div>\n            `\n        },\n        'Treasury Debt Level': {\n            type: 'chartjs',\n            icon: 'landmark',\n            title: 'National Debt Level - Government Obligations',\n            chartContent: `\n                <div>\n                    <canvas id=\"debtChart\"></canvas>\n                </div>\n            `\n        },\n        'Used Vehicle Value Index': {\n            type: 'chartjs',\n            icon: 'shopping-cart',\n            title: 'Used Vehicle Values - Auto Market Trends',\n            chartContent: `\n                <div>\n                    <canvas id=\"vehicleChart\"></canvas>\n                </div>\n            `\n        }\n    };\n    \n    const config = chartConfigs[indicatorName];\n\n    if (config && config.type === 'chartjs') {\n        config.data = createChartData(indicatorData);\n        if (config.data) {\n             // Customize colors for specific charts\n            if (indicatorName === 'CPI') {\n                config.data.datasets[0].borderColor = '#1D3F3B';\n                config.data.datasets[0].backgroundColor = 'rgba(29, 63, 59, 0.15)';\n            } else if (indicatorName === 'PPI') {\n                config.data.datasets[0].borderColor = '#5A9D96';\n                config.data.datasets[0].backgroundColor = 'rgba(90, 157, 150, 0.15)';\n            } else if (indicatorName === 'Housing Starts') {\n                config.data.datasets[0].borderColor = '#B56A18';\n                config.data.datasets[0].backgroundColor = 'rgba(181, 106, 24, 0.15)';\n            } else if (indicatorName === 'New Home Sales') {\n                config.data.datasets[0].borderColor = '#E8955D';\n                config.data.datasets[0].backgroundColor = 'rgba(232, 149, 93, 0.1)';\n            } else if (indicatorName === 'Industrial Production Index') {\n                config.data.datasets[0].borderColor = '#1D3F3B';\n                config.data.datasets[0].backgroundColor = 'rgba(29, 63, 59, 0.15)';\n            } else if (indicatorName === 'Small Business Optimism Index') {\n                config.data.datasets[0].borderColor = '#5A9D96';\n                config.data.datasets[0].backgroundColor = 'rgba(90, 157, 150, 0.15)';\n            } else if (indicatorName === 'Jobless Claims') {\n                config.data.datasets[0].borderColor = '#B56A18';\n                config.data.datasets[0].backgroundColor = 'rgba(181, 106, 24, 0.15)';\n            } else if (indicatorName === 'Job Openings') {\n                config.data.datasets[0].borderColor = '#E8955D';\n                config.data.datasets[0].backgroundColor = 'rgba(232, 149, 93, 0.1)';\n            } else if (indicatorName === 'Private Employment') {\n                config.data.datasets[0].borderColor = '#1D3F3B';\n                config.data.datasets[0].backgroundColor = 'rgba(29, 63, 59, 0.15)';\n            } else if (indicatorName === 'Total Nonfarm Employment') {\n                config.data.datasets[0].borderColor = '#2C5F5A';\n                config.data.datasets[0].backgroundColor = 'rgba(44, 95, 90, 0.15)';\n            } else if (indicatorName === 'Affordability Index') {\n                config.data.datasets[0].borderColor = '#F8F4E6';\n                config.data.datasets[0].backgroundColor = 'rgba(248, 244, 230, 0.1)';\n            } else if (indicatorName === 'Housing Market Index') {\n                config.data.datasets[0].borderColor = '#5A9D96';\n                config.data.datasets[0].backgroundColor = 'rgba(90, 157, 150, 0.15)';\n            } else if (indicatorName === 'Existing Home Sales') {\n                config.data.datasets[0].borderColor = '#B56A18';\n                config.data.datasets[0].backgroundColor = 'rgba(181, 106, 24, 0.15)';\n            } else if (indicatorName === 'Number of Days on Market (Median)') {\n                config.data.datasets[0].borderColor = '#E8955D';\n                config.data.datasets[0].backgroundColor = 'rgba(232, 149, 93, 0.1)';\n            } else if (indicatorName === 'Copper Futures') {\n                config.data.datasets[0].borderColor = '#B56A18';\n                config.data.datasets[0].backgroundColor = 'rgba(181, 106, 24, 0.15)';\n            } else if (indicatorName === 'Lumber Futures') {\n                config.data.datasets[0].borderColor = '#E8955D';\n                config.data.datasets[0].backgroundColor = 'rgba(232, 149, 93, 0.1)';\n            } else if (indicatorName === '20ft Equivalents (TEUs)') {\n                config.data.datasets[0].borderColor = '#5A9D96';\n                config.data.datasets[0].backgroundColor = 'rgba(90, 157, 150, 0.15)';\n            } else if (indicatorName === '10-yr Treasury Yield') {\n                config.data.datasets[0].borderColor = '#1D3F3B';\n                config.data.datasets[0].backgroundColor = 'rgba(29, 63, 59, 0.15)';\n            } else if (indicatorName === '30-yr Mortgage Rate') {\n                config.data.datasets[0].borderColor = '#B56A18';\n                config.data.datasets[0].backgroundColor = 'rgba(181, 106, 24, 0.15)';\n            } else if (indicatorName === 'Case-Shiller National Home Price Index') {\n                config.data.datasets[0].borderColor = '#E8955D';\n                config.data.datasets[0].backgroundColor = 'rgba(232, 149, 93, 0.1)';\n            } else if (indicatorName === 'Composite PMI (Flash)') {\n                config.data.datasets[0].borderColor = '#5A9D96';\n                config.data.datasets[0].backgroundColor = 'rgba(90, 157, 150, 0.15)';\n            } else if (indicatorName === 'Construction Spending') {\n                config.data.datasets[0].borderColor = '#D4822A';\n                config.data.datasets[0].backgroundColor = 'rgba(212, 130, 42, 0.1)';\n            } else if (indicatorName === 'Consumer Confidence') {\n                config.data.datasets[0].borderColor = '#87C5BE';\n                config.data.datasets[0].backgroundColor = 'rgba(135, 197, 190, 0.1)';\n            } else if (indicatorName === 'Consumer Sentiment') {\n                config.data.datasets[0].borderColor = '#2C5F5A';\n                config.data.datasets[0].backgroundColor = 'rgba(44, 95, 90, 0.15)';\n            } else if (indicatorName === 'Dollar Value Index') {\n                config.data.datasets[0].borderColor = '#1D3F3B';\n                config.data.datasets[0].backgroundColor = 'rgba(29, 63, 59, 0.15)';\n            } else if (indicatorName === 'Employment Trends Index') {\n                config.data.datasets[0].borderColor = '#5A9D96';\n                config.data.datasets[0].backgroundColor = 'rgba(90, 157, 150, 0.15)';\n            } else if (indicatorName === 'Interest on Debt') {\n                config.data.datasets[0].borderColor = '#E8955D';\n                config.data.datasets[0].backgroundColor = 'rgba(232, 149, 93, 0.1)';\n            } else if (indicatorName === 'Lagging Economic Index') {\n                config.data.datasets[0].borderColor = '#D4822A';\n                config.data.datasets[0].backgroundColor = 'rgba(212, 130, 42, 0.1)';\n            } else if (indicatorName === 'Leading Economic Indicator') {\n                config.data.datasets[0].borderColor = '#87C5BE';\n                config.data.datasets[0].backgroundColor = 'rgba(135, 197, 190, 0.1)';\n            } else if (indicatorName === 'Manufacturing PMI') {\n                config.data.datasets[0].borderColor = '#1D3F3B';\n                config.data.datasets[0].backgroundColor = 'rgba(29, 63, 59, 0.15)';\n            } else if (indicatorName === 'Median Home Price') {\n                config.data.datasets[0].borderColor = '#5A9D96';\n                config.data.datasets[0].backgroundColor = 'rgba(90, 157, 150, 0.15)';\n            } else if (indicatorName === 'Monthly Budget Deficit') {\n                config.data.datasets[0].borderColor = '#B56A18';\n                config.data.datasets[0].backgroundColor = 'rgba(181, 106, 24, 0.15)';\n            } else if (indicatorName === 'Monthly Retail Sales') {\n                config.data.datasets[0].borderColor = '#E8955D';\n                config.data.datasets[0].backgroundColor = 'rgba(232, 149, 93, 0.1)';\n            } else if (indicatorName === 'New Orders') {\n                config.data.datasets[0].borderColor = '#87C5BE';\n                config.data.datasets[0].backgroundColor = 'rgba(135, 197, 190, 0.1)';\n            } else if (indicatorName === 'Pending Home Sales Index') {\n                config.data.datasets[0].borderColor = '#1D3F3B';\n                config.data.datasets[0].backgroundColor = 'rgba(29, 63, 59, 0.15)';\n            } else if (indicatorName === 'Personal Consumption Expenditures (PCE)') {\n                config.data.datasets[0].borderColor = '#5A9D96';\n                config.data.datasets[0].backgroundColor = 'rgba(90, 157, 150, 0.15)';\n            } else if (indicatorName === 'Southern Border Encounters') {\n                config.data.datasets[0].borderColor = '#B56A18';\n                config.data.datasets[0].backgroundColor = 'rgba(181, 106, 24, 0.15)';\n            } else if (indicatorName === 'Tariff Revenue') {\n                config.data.datasets[0].borderColor = '#E8955D';\n                config.data.datasets[0].backgroundColor = 'rgba(232, 149, 93, 0.1)';\n            } else if (indicatorName === 'Tax Revenue') {\n                config.data.datasets[0].borderColor = '#D4822A';\n                config.data.datasets[0].backgroundColor = 'rgba(212, 130, 42, 0.1)';\n            } else if (indicatorName === 'Trade Deficit') {\n                config.data.datasets[0].borderColor = '#87C5BE';\n                config.data.datasets[0].backgroundColor = 'rgba(135, 197, 190, 0.1)';\n            } else if (indicatorName === 'Treasury Debt Level') {\n                config.data.datasets[0].borderColor = '#1D3F3B';\n                config.data.datasets[0].backgroundColor = 'rgba(29, 63, 59, 0.15)';\n            } else if (indicatorName === 'Used Vehicle Value Index') {\n                config.data.datasets[0].borderColor = '#B56A18';\n                config.data.datasets[0].backgroundColor = 'rgba(181, 106, 24, 0.15)';\n            }\n        }\n    }\n\n    // Special case for 'Jobs Added' which is a line chart with specific colors and hardcoded data\n    if (indicatorName === 'Jobs Added') {\n        config.data = {\n            labels: ['Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug'],\n            datasets: [{\n                label: 'Jobs Added (Thousands)',\n                data: [120, 158, 19, 14, 73, 22],\n                borderColor: '#2C5F5A',\n                backgroundColor: 'rgba(44, 95, 90, 0.1)',\n                tension: 0.4,\n                fill: true,\n                pointBackgroundColor: '#2C5F5A',\n                pointBorderColor: '#2C5F5A',\n                pointBorderWidth: 2,\n                pointRadius: 4\n            }]\n        };\n    }\n\n\n    return config;\n}\n\n\n// Initialize Chart.js charts\nfunction initializeChart(chartConfig) {\n    if (chartConfig.type === 'chartjs' && chartConfig.data) {\n        // Wait for DOM to be ready\n        setTimeout(() => {\n            const canvasId = chartConfig.chartContent.match(/id=\"([^\"]+)\"/)?.[1];\n            if (canvasId) {\n                const canvas = document.getElementById(canvasId);\n                if (canvas) {\n                    const ctx = canvas.getContext('2d');\n                    \n                    // Destroy existing chart if it exists\n                    if (window[canvasId + 'Chart']) {\n                        window[canvasId + 'Chart'].destroy();\n                    }\n                    \n                    // Create new chart\n                    const chartInstance = new Chart(ctx, {\n                        type: 'line',\n                        data: chartConfig.data,\n                        options: {\n                            responsive: true,\n                            maintainAspectRatio: false,\n                            layout: {\n                                padding: { top: 5, right: 5, bottom: 5, left: 5 }\n                            },\n                            animation: {\n                                duration: 800,\n                                easing: 'easeInOutQuart'\n                            },\n                            plugins: {\n                                legend: {\n                                    position: 'top',\n                                    align: 'center',\n                                    labels: {\n                                        usePointStyle: true,\n                                        padding: 8,\n                                        boxWidth: 6,\n                                        font: {\n                                            size: 10\n                                        }\n                                    }\n                                },\n                                title: {\n                                    display: true,\n                                    padding: { bottom: 5 }\n                                },\n                                tooltip: {\n                                    mode: 'index',\n                                    intersect: false,\n                                    padding: 8,\n                                    titleFont: { size: 10 },\n                                    bodyFont: { size: 10 },\n                                    boxPadding: 4\n                                },\n                                datalabels: {\n                                    display: false\n                                },\n                                tooltip: {\n                                    mode: 'index',\n                                    intersect: false,\n                                    backgroundColor: 'rgba(0, 0, 0, 0.8)',\n                                    titleColor: '#fff',\n                                    bodyColor: '#fff',\n                                    borderColor: '#2C5F5A',\n                                    borderWidth: 1,\n                                    callbacks: {\n                                        label: function(context) {\n                                            let label = context.dataset.label || '';\n                                            if (label) {\n                                                label += ': ';\n                                            }\n                                            if (context.parsed.y !== null) {\n                                                label += new Intl.NumberFormat('en-US', {\n                                                    minimumFractionDigits: 2,\n                                                    maximumFractionDigits: 2\n                                                }).format(context.parsed.y);\n                                            }\n                                            return label;\n                                        }\n                                    }\n                                }\n                            },\n                            scales: {\n                                x: {\n                                    grid: {\n                                        display: false,\n                                        drawBorder: false\n                                    },\n                                    ticks: {\n                                        maxRotation: 0,\n                                        autoSkip: true,\n                                        maxTicksLimit: 6,\n                                        padding: 2,\n                                        font: {\n                                            size: 9\n                                        }\n                                    }\n                                },\n                                y: {\n                                    beginAtZero: false,\n                                    grid: {\n                                        color: 'rgba(0, 0, 0, 0.03)',\n                                        drawBorder: false\n                                    },\n                                    ticks: {\n                                        padding: 2,\n                                        font: {\n                                            size: 9\n                                        },\n                                        callback: function(value) {\n                                            return value.toLocaleString();\n                                        }\n                                    },\n                                    position: 'right'\n                                }\n                            },\n                            interaction: {\n                                mode: 'nearest',\n                                axis: 'x',\n                                intersect: false\n                            }\n                        }\n                    });\n                    \n                    window[canvasId + 'Chart'] = chartInstance;\n                    return chartInstance;\n                }\n            }\n        }, 100);\n    }\n    return null;\n}\n\n// Setup modal close functionality\nfunction setupModalHandlers() {\n    const modal = document.getElementById('chartModal');\n    const closeBtn = document.getElementById('closeChartModal');\n    \n    // Close button click\n    closeBtn.addEventListener('click', function() {\n        modal.style.display = 'none';\n        \n        // Unregister charts when modal is closed\n        realTimeManager.activeCharts.forEach((chartInstance, indicatorName) => {\n            realTimeManager.unregisterChart(indicatorName);\n        });\n    });\n    \n    // Click outside modal to close\n    modal.addEventListener('click', function(e) {\n        if (e.target === modal) {\n            modal.style.display = 'none';\n            \n            // Unregister charts when modal is closed\n            realTimeManager.activeCharts.forEach((chartInstance, indicatorName) => {\n                realTimeManager.unregisterChart(indicatorName);\n            });\n        }\n    });\n    \n    // ESC key to close\n    document.addEventListener('keydown', function(e) {\n        if (e.key === 'Escape' && modal.style.display === 'block') {\n            modal.style.display = 'none';\n            \n            // Unregister charts when modal is closed\n            realTimeManager.activeCharts.forEach((chartInstance, indicatorName) => {\n                realTimeManager.unregisterChart(indicatorName);\n            });\n        }\n    });\n}\n\n// Export functions for use in main financials.js\nwindow.setupChartIconHandlers = setupChartIconHandlers;\nwindow.setupModalHandlers = setupModalHandlers;\nwindow.showChartModal = showChartModal;\nwindow.toggleChartOverlay = toggleChartOverlay;\nwindow.createChartOverlay = createChartOverlay;\nwindow.showChartOverlay = showChartOverlay;\nwindow.hideChartOverlay = hideChartOverlay;\nwindow.loadChartInOverlay = loadChartInOverlay;\nwindow.initializeChartInOverlay = initializeChartInOverlay;\nwindow.realTimeManager = realTimeManager;"
  ],
  "mappings": "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",
  "debugId": "03000D2B0EED2D5E64756E2164756E21",
  "names": []
}